{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAGA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtB,IAAIC,SAAQ,SAACC,EAASC,GAChCL,EACFI,EAAQ,CAAEE,SAAAR,EAAUS,MAAAR,IAEpBM,EAAO,CAAEC,SAAAR,EAAUS,MAAAR,G,IAIpBS,MAAK,SAAAC,G,IAAGH,EAAQG,EAARH,SAAUC,EAAKE,EAALF,MACjBG,EAAAf,GAASgB,OAAOC,QAAQ,uBAAwCC,OAAfP,EAAS,QAAYO,OAANN,EAAM,M,IAGvEO,OAAM,SAAAL,G,IAAGH,EAAQG,EAARH,SAAUC,EAAKE,EAALF,MAClBG,EAAAf,GAASgB,OAAOI,QAAQ,sBAAuCF,OAAfP,EAAS,QAAYO,OAANN,EAAM,M,IAjB3EG,EAAAf,GAASgB,OAAOK,KAAK,IAsBrB,IAAMC,EAAaC,SAASC,cAAc,uBACpCC,EAAYF,SAASC,cAAc,sBACnCE,EAAcH,SAASC,cAAc,wBAC5BD,SAASC,cAAc,UACzBD,SAASC,cAAc,SAE/BG,iBAAiB,UAAU,SAAAC,GAC9BA,EAAEC,iBACFC,YAAW,WACT5B,EAAc,EAAGoB,EAAWS,M,GAC3BT,EAAWS,OACd,IAAMC,EAAWC,aAAY,WAC3B,IAAK,IAAIC,EAAI,EAAGA,GAAKR,EAAYK,MAAOG,IACtChC,EAAcgC,EAAGT,EAAUM,OAE7BI,cAAcH,E,GACbP,EAAUM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nNotiflix.Notify.init({});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n  promise\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n\nconst inputDelay = document.querySelector(\"input[name='delay']\");\nconst inputStep = document.querySelector(\"input[name='step']\");\nconst inputAmount = document.querySelector(\"input[name='amount']\");\nconst button = document.querySelector('button');\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', e => {\n  e.preventDefault();\n  setTimeout(() => {\n    createPromise(1, inputDelay.value);\n  }, inputDelay.value);\n  const interval = setInterval(() => {\n    for (let i = 2; i <= inputAmount.value; i++) {\n      createPromise(i, inputStep.value);\n    }\n    clearInterval(interval);\n  }, inputStep.value);\n});\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position1","delay1","shouldResolve","Math","random","Promise","resolve","reject","position","delay","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","init","$ce04d3a99e08e73b$var$inputDelay","document","querySelector","$ce04d3a99e08e73b$var$inputStep","$ce04d3a99e08e73b$var$inputAmount","addEventListener","e","preventDefault","setTimeout","value","interval","setInterval","i","clearInterval"],"version":3,"file":"03-promises.d6235cb3.js.map"}